use gb_asm::{
    instructions::{load::Action::*, subroutine::call::VectorSlot, Condition::*, Instruction},
    Bit,
    Pair::*,
    Register::*,
};

pub mod instructions;
pub use instructions::*;

/// Attempts to convert the given `opcode` into a valid instruction. Note that not all instructions
/// are implemented in the Gameboy's CPU, in which case `None` is returned.
///
/// If the matched instruction is the prefix instruction (`Instruction::Prefix`), the next byte in
/// your data stream should be treated as an opcode and passed to [`parse_prefixed()`].
pub fn parse(opcode: u8) -> Option<Instruction> {
    let instr = match opcode {
        0x00 => nop(),
        0x01 => load_into_pair(BC),
        0x02 => load_into_pair_pointer(BC),
        0x03 => increment_pair(BC),
        0x04 => increment_register(B),
        0x05 => decrement_register(B),
        0x06 => load_into_register_from_constant(B),
        0x07 => cyclic_rotate_left_accumulator(),
        0x08 => load_into_constant_pointer_from_stack_pointer(),
        0x09 => add_pair_to_hl(BC),
        0x0A => load_into_accumulator_from_pair_pointer(BC),
        0x0B => decrement_pair(BC),
        0x0C => increment_register(C),
        0x0D => decrement_register(C),
        0x0E => load_into_register_from_constant(C),
        0x0F => cyclic_rotate_right_accumulator(),

        0x10 => stop(),
        0x11 => load_into_pair(DE),
        0x12 => load_into_pair_pointer(DE),
        0x13 => increment_pair(DE),
        0x14 => increment_register(D),
        0x15 => decrement_register(D),
        0x16 => load_into_register_from_constant(D),
        0x17 => carrying_rotate_left_accumulator(),
        0x18 => relative_jump(None),
        0x19 => add_pair_to_hl(DE),
        0x1A => load_into_accumulator_from_pair_pointer(DE),
        0x1B => decrement_pair(DE),
        0x1C => increment_register(E),
        0x1D => decrement_register(E),
        0x1E => load_into_register_from_constant(E),
        0x1F => carrying_rotate_right_accumulator(),

        0x20 => relative_jump(NotZero),
        0x21 => load_into_pair(HL),
        0x22 => load_into_hl_incdec(Increment),
        0x23 => increment_pair(HL),
        0x24 => increment_register(H),
        0x25 => decrement_register(D),
        0x26 => load_into_register_from_constant(H),
        0x27 => decimal_adjust_acumulator(),
        0x28 => relative_jump(Zero),
        0x29 => add_pair_to_hl(HL),
        0x2A => load_into_accumulator_from_hlx(Increment),
        0x2B => decrement_pair(DE),
        0x2C => increment_register(L),
        0x2D => decrement_register(L),
        0x2E => load_into_register_from_constant(L),
        0x2F => complement_accumulator(),

        0x30 => relative_jump(NotCarry),
        0x31 => load_from_constant_into_stack_pointer(),
        0x32 => load_into_hl_incdec(Decrement),
        0x33 => increment_stack_pointer(),
        0x34 => increment_pointer_value(),
        0x35 => decrement_pointer_value(),
        0x36 => load_into_hl_pointer(),
        0x37 => set_carry_flag(),
        0x38 => relative_jump(Carry),
        0x39 => add_stack_pointer_to_hl(),
        0x3A => load_into_accumulator_from_hlx(Decrement),
        0x3B => decrement_stack_pointer(),
        0x3C => increment_register(A),
        0x3D => decrement_register(A),
        0x3E => load_into_register_from_constant(A),
        0x3F => complement_carry_flag(),

        0x40 => load_into_register_from_register(B, B),
        0x41 => load_into_register_from_register(B, C),
        0x42 => load_into_register_from_register(B, D),
        0x43 => load_into_register_from_register(B, E),
        0x44 => load_into_register_from_register(B, H),
        0x45 => load_into_register_from_register(B, L),
        0x46 => load_into_register_from_pointer_value(B),
        0x47 => load_into_register_from_register(B, A),
        0x48 => load_into_register_from_register(C, B),
        0x49 => load_into_register_from_register(C, C),
        0x4A => load_into_register_from_register(C, D),
        0x4B => load_into_register_from_register(C, E),
        0x4C => load_into_register_from_register(C, H),
        0x4D => load_into_register_from_register(C, L),
        0x4E => load_into_register_from_pointer_value(C),
        0x4F => load_into_register_from_register(C, A),

        0x50 => load_into_register_from_register(D, B),
        0x51 => load_into_register_from_register(D, C),
        0x52 => load_into_register_from_register(D, D),
        0x53 => load_into_register_from_register(D, E),
        0x54 => load_into_register_from_register(D, H),
        0x55 => load_into_register_from_register(D, L),
        0x56 => load_into_register_from_pointer_value(D),
        0x57 => load_into_register_from_register(D, A),
        0x58 => load_into_register_from_register(E, B),
        0x59 => load_into_register_from_register(E, C),
        0x5A => load_into_register_from_register(E, D),
        0x5B => load_into_register_from_register(E, E),
        0x5C => load_into_register_from_register(E, H),
        0x5D => load_into_register_from_register(E, L),
        0x5E => load_into_register_from_pointer_value(E),
        0x5F => load_into_register_from_register(E, A),

        0x60 => load_into_register_from_register(H, B),
        0x61 => load_into_register_from_register(H, C),
        0x62 => load_into_register_from_register(H, D),
        0x63 => load_into_register_from_register(H, E),
        0x64 => load_into_register_from_register(H, H),
        0x65 => load_into_register_from_register(H, L),
        0x66 => load_into_register_from_pointer_value(H),
        0x67 => load_into_register_from_register(H, A),
        0x68 => load_into_register_from_register(L, B),
        0x69 => load_into_register_from_register(L, C),
        0x6A => load_into_register_from_register(L, D),
        0x6B => load_into_register_from_register(L, E),
        0x6C => load_into_register_from_register(L, H),
        0x6D => load_into_register_from_register(L, L),
        0x6E => load_into_register_from_pointer_value(L),
        0x6F => load_into_register_from_register(L, A),

        0x70 => load_register_into_hl_pointer(B),
        0x71 => load_register_into_hl_pointer(C),
        0x72 => load_register_into_hl_pointer(D),
        0x73 => load_register_into_hl_pointer(E),
        0x74 => load_register_into_hl_pointer(H),
        0x75 => load_register_into_hl_pointer(L),
        0x76 => halt(),
        0x77 => load_register_into_hl_pointer(A),
        0x78 => load_into_register_from_register(A, B),
        0x79 => load_into_register_from_register(A, C),
        0x7A => load_into_register_from_register(A, D),
        0x7B => load_into_register_from_register(A, E),
        0x7C => load_into_register_from_register(A, H),
        0x7D => load_into_register_from_register(A, L),
        0x7E => load_into_register_from_pointer_value(A),
        0x7F => load_into_register_from_register(A, A),

        0x80 => add_register_to_accumulator(B),
        0x81 => add_register_to_accumulator(C),
        0x82 => add_register_to_accumulator(D),
        0x83 => add_register_to_accumulator(E),
        0x84 => add_register_to_accumulator(H),
        0x85 => add_register_to_accumulator(L),
        0x86 => add_pointer_value_to_accumulator(),
        0x87 => add_register_to_accumulator(A),
        0x88 => add_register_to_accumulator_plus_carry(B),
        0x89 => add_register_to_accumulator_plus_carry(C),
        0x8A => add_register_to_accumulator_plus_carry(D),
        0x8B => add_register_to_accumulator_plus_carry(E),
        0x8C => add_register_to_accumulator_plus_carry(H),
        0x8D => add_register_to_accumulator_plus_carry(L),
        0x8E => add_pointer_value_to_accumulator_plus_carry(),
        0x8F => add_register_to_accumulator_plus_carry(A),

        0x90 => subtract_register(B),
        0x91 => subtract_register(C),
        0x92 => subtract_register(D),
        0x93 => subtract_register(E),
        0x94 => subtract_register(H),
        0x95 => subtract_register(L),
        0x96 => subtract_pointer_value(),
        0x97 => subtract_register(A),
        0x98 => subtract_register_with_carry(B),
        0x99 => subtract_register_with_carry(C),
        0x9A => subtract_register_with_carry(D),
        0x9B => subtract_register_with_carry(E),
        0x9C => subtract_register_with_carry(H),
        0x9D => subtract_register_with_carry(L),
        0x9E => subtract_pointer_value_with_carry(),
        0x9F => subtract_register_with_carry(A),

        0xA0 => and_register(B),
        0xA1 => and_register(C),
        0xA2 => and_register(D),
        0xA3 => and_register(E),
        0xA4 => and_register(H),
        0xA5 => and_register(L),
        0xA6 => and_pointer_value(),
        0xA7 => and_register(A),
        0xA8 => xor_register(B),
        0xA9 => xor_register(C),
        0xAA => xor_register(D),
        0xAB => xor_register(E),
        0xAC => xor_register(H),
        0xAD => xor_register(L),
        0xAE => xor_pointer_value(),
        0xAF => xor_register(A),

        0xB0 => or_register(B),
        0xB1 => or_register(C),
        0xB2 => or_register(D),
        0xB3 => or_register(E),
        0xB4 => or_register(H),
        0xB5 => or_register(L),
        0xB6 => or_pointer_value(),
        0xB7 => or_register(A),
        0xB8 => cp_register(B),
        0xB9 => cp_register(C),
        0xBA => cp_register(D),
        0xBB => cp_register(E),
        0xBC => cp_register(H),
        0xBD => cp_register(L),
        0xBE => cp_pointer_value(),
        0xBF => cp_register(A),

        0xC0 => sub_return(NotZero),
        0xC1 => pop_pair(BC),
        0xC2 => jump(NotZero),
        0xC3 => jump(None),
        0xC4 => call(NotZero),
        0xC5 => push_pair(BC),
        0xC6 => add_constant_to_accumulator(),
        0xC7 => call_vector(VectorSlot::Zero),
        0xC8 => sub_return(Zero),
        0xC9 => sub_return(None),
        0xCA => jump(Zero),
        0xCB => prefix(),
        0xCC => call(Zero),
        0xCD => call(None),
        0xCE => add_constant_to_accumulator_plus_carry(),
        0xCF => call_vector(VectorSlot::One),

        0xD0 => sub_return(NotCarry),
        0xD1 => pop_pair(DE),
        0xD2 => jump(NotCarry),
        // 0xD3 => None,
        0xD4 => call(NotCarry),
        0xD5 => push_pair(DE),
        0xD6 => subtract_constant(),
        0xD7 => call_vector(VectorSlot::Two),
        0xD8 => sub_return(Carry),
        0xD9 => sub_return_enable_interrupts(),
        0xDA => jump(Carry),
        // 0xDB => None,
        0xDC => call(Carry),
        // 0xDD => None,
        0xDE => subtract_constant_with_carry(),
        0xDF => call_vector(VectorSlot::Three),

        0xE0 => load_into_high_constant_pointer(),
        0xE1 => pop_pair(HL),
        0xE2 => load_into_highc_pointer(),
        // 0xE3 | 0xE4 => None,
        0xE5 => push_pair(HL),
        0xE6 => and_constant(),
        0xE7 => call_vector(VectorSlot::Four),
        0xE8 => add_signed_constant_to_stack_pointer(),
        0xE9 => jump_to_pointer(),
        0xEA => load_into_constant_pointer_from_accumulator(),
        // 0xEB..=0xED => None,
        0xEE => xor_constant(),
        0xEF => call_vector(VectorSlot::Five),

        0xF0 => load_high_constant_pointer_into_accumulator(),
        0xF1 => pop_accumulator_and_flags(),
        0xF2 => load_highc_pointer_into_accumulator(),
        0xF3 => disable_interrupts(),
        // 0xF4 => None,
        0xF5 => push_accumulator_and_flags(),
        0xF6 => or_constant(),
        0xF7 => call_vector(VectorSlot::Six),
        0xF8 => load_stack_pointer_plus_signed_constant_into_hl(),
        0xF9 => load_from_hl_into_stack_pointer(),
        0xFA => load_constant_pointer_into_accumulator(),
        0xFB => enable_interrupts(),
        // 0xFC | 0xFD => None,
        0xFE => cp_constant(),
        0xFF => call_vector(VectorSlot::Seven),
        _ => return None,
    };

    Some(instr)
}

/// Converts an opcode to an instruction from the PREFIX CB table. You should only call this
/// function after receiving an `Instruction::Prefix` from [`parse()`].
///
/// Unlike [`parse()`], all instructions in the CB table are implemented, so a result is
/// guaranteed.
pub fn parse_prefixed(opcode: u8) -> Instruction {
    match opcode {
        0x00 => cyclic_rotate_left_register(B),
        0x01 => cyclic_rotate_left_register(C),
        0x02 => cyclic_rotate_left_register(D),
        0x03 => cyclic_rotate_left_register(E),
        0x04 => cyclic_rotate_left_register(H),
        0x05 => cyclic_rotate_left_register(L),
        0x06 => cyclic_rotate_left_pointer_value(),
        0x07 => cyclic_rotate_left_register(A),
        0x08 => cyclic_rotate_right_register(B),
        0x09 => cyclic_rotate_right_register(C),
        0x0A => cyclic_rotate_right_register(D),
        0x0B => cyclic_rotate_right_register(E),
        0x0C => cyclic_rotate_right_register(H),
        0x0D => cyclic_rotate_right_register(L),
        0x0E => cyclic_rotate_right_pointer_value(),
        0x0F => cyclic_rotate_right_register(A),

        0x10 => carrying_rotate_left_register(B),
        0x11 => carrying_rotate_left_register(C),
        0x12 => carrying_rotate_left_register(D),
        0x13 => carrying_rotate_left_register(E),
        0x14 => carrying_rotate_left_register(H),
        0x15 => carrying_rotate_left_register(L),
        0x16 => carrying_rotate_left_pointer_value(),
        0x17 => carrying_rotate_left_register(A),
        0x18 => carrying_rotate_right_register(B),
        0x19 => carrying_rotate_right_register(C),
        0x1A => carrying_rotate_right_register(D),
        0x1B => carrying_rotate_right_register(E),
        0x1C => carrying_rotate_right_register(H),
        0x1D => carrying_rotate_right_register(L),
        0x1E => carrying_rotate_right_pointer_value(),
        0x1F => carrying_rotate_right_register(A),

        0x20 => shift_left_register(B),
        0x21 => shift_left_register(C),
        0x22 => shift_left_register(D),
        0x23 => shift_left_register(E),
        0x24 => shift_left_register(H),
        0x25 => shift_left_register(L),
        0x26 => shift_left_pointer_value(),
        0x27 => shift_left_register(A),
        0x28 => arithmetic_shift_right_register(B),
        0x29 => arithmetic_shift_right_register(C),
        0x2A => arithmetic_shift_right_register(D),
        0x2B => arithmetic_shift_right_register(E),
        0x2C => arithmetic_shift_right_register(H),
        0x2D => arithmetic_shift_right_register(L),
        0x2E => arithmetic_shift_right_pointer_value(),
        0x2F => arithmetic_shift_right_register(A),

        0x30 => swap_register(B),
        0x31 => swap_register(C),
        0x32 => swap_register(D),
        0x33 => swap_register(E),
        0x34 => swap_register(H),
        0x35 => swap_register(L),
        0x36 => swap_pointer_value(),
        0x37 => swap_register(A),
        0x38 => logical_shift_right_register(B),
        0x39 => logical_shift_right_register(C),
        0x3A => logical_shift_right_register(D),
        0x3B => logical_shift_right_register(E),
        0x3C => logical_shift_right_register(H),
        0x3D => logical_shift_right_register(L),
        0x3E => logical_shift_right_pointer_value(),
        0x3F => logical_shift_right_register(A),

        0x40 => test_register(Bit::zero(), B),
        0x41 => test_register(Bit::zero(), C),
        0x42 => test_register(Bit::zero(), D),
        0x43 => test_register(Bit::zero(), E),
        0x44 => test_register(Bit::zero(), H),
        0x45 => test_register(Bit::zero(), L),
        0x46 => test_pointer_value(Bit::zero()),
        0x47 => test_register(Bit::zero(), A),
        0x48 => test_register(Bit::one(), B),
        0x49 => test_register(Bit::one(), C),
        0x4A => test_register(Bit::one(), D),
        0x4B => test_register(Bit::one(), E),
        0x4C => test_register(Bit::one(), H),
        0x4D => test_register(Bit::one(), L),
        0x4E => test_pointer_value(Bit::one()),
        0x4F => test_register(Bit::one(), A),

        0x50 => test_register(Bit::two(), B),
        0x51 => test_register(Bit::two(), C),
        0x52 => test_register(Bit::two(), D),
        0x53 => test_register(Bit::two(), E),
        0x54 => test_register(Bit::two(), H),
        0x55 => test_register(Bit::two(), L),
        0x56 => test_pointer_value(Bit::two()),
        0x57 => test_register(Bit::two(), A),
        0x58 => test_register(Bit::three(), B),
        0x59 => test_register(Bit::three(), C),
        0x5A => test_register(Bit::three(), D),
        0x5B => test_register(Bit::three(), E),
        0x5C => test_register(Bit::three(), H),
        0x5D => test_register(Bit::three(), L),
        0x5E => test_pointer_value(Bit::three()),
        0x5F => test_register(Bit::three(), A),

        0x60 => test_register(Bit::four(), B),
        0x61 => test_register(Bit::four(), C),
        0x62 => test_register(Bit::four(), D),
        0x63 => test_register(Bit::four(), E),
        0x64 => test_register(Bit::four(), H),
        0x65 => test_register(Bit::four(), L),
        0x66 => test_pointer_value(Bit::four()),
        0x67 => test_register(Bit::four(), A),
        0x68 => test_register(Bit::five(), B),
        0x69 => test_register(Bit::five(), C),
        0x6A => test_register(Bit::five(), D),
        0x6B => test_register(Bit::five(), E),
        0x6C => test_register(Bit::five(), H),
        0x6D => test_register(Bit::five(), L),
        0x6E => test_pointer_value(Bit::five()),
        0x6F => test_register(Bit::five(), A),

        0x70 => test_register(Bit::six(), B),
        0x71 => test_register(Bit::six(), C),
        0x72 => test_register(Bit::six(), D),
        0x73 => test_register(Bit::six(), E),
        0x74 => test_register(Bit::six(), H),
        0x75 => test_register(Bit::six(), L),
        0x76 => test_pointer_value(Bit::six()),
        0x77 => test_register(Bit::six(), A),
        0x78 => test_register(Bit::seven(), B),
        0x79 => test_register(Bit::seven(), C),
        0x7A => test_register(Bit::seven(), D),
        0x7B => test_register(Bit::seven(), E),
        0x7C => test_register(Bit::seven(), H),
        0x7D => test_register(Bit::seven(), L),
        0x7E => test_pointer_value(Bit::seven()),
        0x7F => test_register(Bit::seven(), A),

        0x80 => reset_register(Bit::zero(), B),
        0x81 => reset_register(Bit::zero(), C),
        0x82 => reset_register(Bit::zero(), D),
        0x83 => reset_register(Bit::zero(), E),
        0x84 => reset_register(Bit::zero(), H),
        0x85 => reset_register(Bit::zero(), L),
        0x86 => reset_pointer_value(Bit::zero()),
        0x87 => reset_register(Bit::zero(), A),
        0x88 => reset_register(Bit::one(), B),
        0x89 => reset_register(Bit::one(), C),
        0x8A => reset_register(Bit::one(), D),
        0x8B => reset_register(Bit::one(), E),
        0x8C => reset_register(Bit::one(), H),
        0x8D => reset_register(Bit::one(), L),
        0x8E => reset_pointer_value(Bit::one()),
        0x8F => reset_register(Bit::one(), A),

        0x90 => reset_register(Bit::two(), B),
        0x91 => reset_register(Bit::two(), C),
        0x92 => reset_register(Bit::two(), D),
        0x93 => reset_register(Bit::two(), E),
        0x94 => reset_register(Bit::two(), H),
        0x95 => reset_register(Bit::two(), L),
        0x96 => reset_pointer_value(Bit::two()),
        0x97 => reset_register(Bit::two(), A),
        0x98 => reset_register(Bit::three(), B),
        0x99 => reset_register(Bit::three(), C),
        0x9A => reset_register(Bit::three(), D),
        0x9B => reset_register(Bit::three(), E),
        0x9C => reset_register(Bit::three(), H),
        0x9D => reset_register(Bit::three(), L),
        0x9E => reset_pointer_value(Bit::three()),
        0x9F => reset_register(Bit::three(), A),

        0xA0 => reset_register(Bit::four(), B),
        0xA1 => reset_register(Bit::four(), C),
        0xA2 => reset_register(Bit::four(), D),
        0xA3 => reset_register(Bit::four(), E),
        0xA4 => reset_register(Bit::four(), H),
        0xA5 => reset_register(Bit::four(), L),
        0xA6 => reset_pointer_value(Bit::four()),
        0xA7 => reset_register(Bit::four(), A),
        0xA8 => reset_register(Bit::five(), B),
        0xA9 => reset_register(Bit::five(), C),
        0xAA => reset_register(Bit::five(), D),
        0xAB => reset_register(Bit::five(), E),
        0xAC => reset_register(Bit::five(), H),
        0xAD => reset_register(Bit::five(), L),
        0xAE => reset_pointer_value(Bit::five()),
        0xAF => reset_register(Bit::five(), A),

        0xB0 => reset_register(Bit::six(), B),
        0xB1 => reset_register(Bit::six(), C),
        0xB2 => reset_register(Bit::six(), D),
        0xB3 => reset_register(Bit::six(), E),
        0xB4 => reset_register(Bit::six(), H),
        0xB5 => reset_register(Bit::six(), L),
        0xB6 => reset_pointer_value(Bit::six()),
        0xB7 => reset_register(Bit::six(), A),
        0xB8 => reset_register(Bit::seven(), B),
        0xB9 => reset_register(Bit::seven(), C),
        0xBA => reset_register(Bit::seven(), D),
        0xBB => reset_register(Bit::seven(), E),
        0xBC => reset_register(Bit::seven(), H),
        0xBD => reset_register(Bit::seven(), L),
        0xBE => reset_pointer_value(Bit::seven()),
        0xBF => reset_register(Bit::seven(), A),

        0xC0 => set_register(Bit::zero(), B),
        0xC1 => set_register(Bit::zero(), C),
        0xC2 => set_register(Bit::zero(), D),
        0xC3 => set_register(Bit::zero(), E),
        0xC4 => set_register(Bit::zero(), H),
        0xC5 => set_register(Bit::zero(), L),
        0xC6 => set_pointer_value(Bit::zero()),
        0xC7 => set_register(Bit::zero(), A),
        0xC8 => set_register(Bit::one(), B),
        0xC9 => set_register(Bit::one(), C),
        0xCA => set_register(Bit::one(), D),
        0xCB => set_register(Bit::one(), E),
        0xCC => set_register(Bit::one(), H),
        0xCD => set_register(Bit::one(), L),
        0xCE => set_pointer_value(Bit::one()),
        0xCF => set_register(Bit::one(), A),

        0xD0 => set_register(Bit::two(), B),
        0xD1 => set_register(Bit::two(), C),
        0xD2 => set_register(Bit::two(), D),
        0xD3 => set_register(Bit::two(), E),
        0xD4 => set_register(Bit::two(), H),
        0xD5 => set_register(Bit::two(), L),
        0xD6 => set_pointer_value(Bit::two()),
        0xD7 => set_register(Bit::two(), A),
        0xD8 => set_register(Bit::three(), B),
        0xD9 => set_register(Bit::three(), C),
        0xDA => set_register(Bit::three(), D),
        0xDB => set_register(Bit::three(), E),
        0xDC => set_register(Bit::three(), H),
        0xDD => set_register(Bit::three(), L),
        0xDE => set_pointer_value(Bit::three()),
        0xDF => set_register(Bit::three(), A),

        0xE0 => set_register(Bit::four(), B),
        0xE1 => set_register(Bit::four(), C),
        0xE2 => set_register(Bit::four(), D),
        0xE3 => set_register(Bit::four(), E),
        0xE4 => set_register(Bit::four(), H),
        0xE5 => set_register(Bit::four(), L),
        0xE6 => set_pointer_value(Bit::four()),
        0xE7 => set_register(Bit::four(), A),
        0xE8 => set_register(Bit::five(), B),
        0xE9 => set_register(Bit::five(), C),
        0xEA => set_register(Bit::five(), D),
        0xEB => set_register(Bit::five(), E),
        0xEC => set_register(Bit::five(), H),
        0xED => set_register(Bit::five(), L),
        0xEE => set_pointer_value(Bit::five()),
        0xEF => set_register(Bit::five(), A),

        0xF0 => set_register(Bit::six(), B),
        0xF1 => set_register(Bit::six(), C),
        0xF2 => set_register(Bit::six(), D),
        0xF3 => set_register(Bit::six(), E),
        0xF4 => set_register(Bit::six(), H),
        0xF5 => set_register(Bit::six(), L),
        0xF6 => set_pointer_value(Bit::six()),
        0xF7 => set_register(Bit::six(), A),
        0xF8 => set_register(Bit::seven(), B),
        0xF9 => set_register(Bit::seven(), C),
        0xFA => set_register(Bit::seven(), D),
        0xFB => set_register(Bit::seven(), E),
        0xFC => set_register(Bit::seven(), H),
        0xFD => set_register(Bit::seven(), L),
        0xFE => set_pointer_value(Bit::seven()),
        0xFF => set_register(Bit::seven(), A),
    }
}
